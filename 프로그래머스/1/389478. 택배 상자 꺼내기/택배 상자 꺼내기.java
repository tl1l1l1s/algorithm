class Solution {
    public int solution(int n, int w, int num) {
        int answer = 0;
        
        // 1~n의 번호가 있는 택배 상자가 창고에 존재
        // 왼쪽 -> 오른쪽으로 가며 1~번호 순서 
        // 상자를 꺼내려면 세로로 몇 개를 뽑아야 하는지 알아낸다
        // 택배상자의 개수 n, 가로로 놓는 상자의 개수 w, 꺼내려는 상자의 번호 num
        
        // 상자의 위치는 번호의 차이가 2 * w 일 때마다 반복
        // num 과 n의 차이가 2 * w씩 날 때마다 뺄 상자가 2개씩 늘어남

        // n과 num 사이의 사이클에 해당하는 상자를 계산하는 수식
        answer = ((n - num) / (2 * w)) * 2 + 1;

        // 빼야할 상자가 늘어나는 조건을 num과 n의 상대적 위치에 따라 분류
        // 모든 사이클(num 아래의 상자들 포함)의 상자를 뺀 것으로 가정한 상대적 위치를 기준으로 함 ex) (34, 6, 16) -> (10, 6, 4) 
        //n과 num이 같은 줄에 있는 경우
        if(((num - 1) % (2 * w) / w) == ((n - 1) % (2 * w) / w)){
            //num과 n의 사이클(2 * w) 기준 상대위치를 비교해서 num이 더 뒤에 있는 경우
            if(((num - 1) % (2 * w)) > ((n - 1) % (2 * w)))
                answer++;
        }
        //n과 num이 다른 줄에 있는 경우
        else {
            //사이클 기준 num과 n의 합이 2*w 이상이면 상자를 한 개 추가로 뺌
            if(((num - 1) % (2 * w) + (n - 1) % (2 * w)) >= (2 * w - 1))
                answer++;
        }
        return answer;
    }
}